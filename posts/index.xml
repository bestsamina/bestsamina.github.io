<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>POST on Samina Website</title>
    <link>https://bestsamina.github.io/posts/</link>
    <description>Recent content in POST on Samina Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>@Samina Fu</copyright>
    <lastBuildDate>Fri, 29 Apr 2022 14:00:35 +0800</lastBuildDate><atom:link href="https://bestsamina.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>日本退稅處理-TBD</title>
      <link>https://bestsamina.github.io/posts/2022-04-29-japan-tax/</link>
      <pubDate>Fri, 29 Apr 2022 14:00:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2022-04-29-japan-tax/</guid>
      <description>在日所繳的稅 TBD
脫稅流程  請求[脱退一時金] 收到[脱退一時金決定通知書]，會於通知書上的支付日收到款項 進行所得稅退稅程序
a. 線上做成確定申告單
b. 取得 - [退年金稅確定申告書]與[退所得稅確定申告單]: 需要脫稅項目&amp;quot;厚生年金被扣的 20% + 回國當年被扣的所得稅&amp;quot;
c. 寄出資料 收到退稅款項  脫稅各項作業詳細說明 1. 請求 脱退一時金 準備流程：
 影印脱退一時金請求書 填寫資料(需要&amp;quot;年金手帳&amp;quot;的基礎年幾番号、可以留在台灣的外幣戶頭) 寄出以下資料  脫退一時金請求書 護照影本 住民票影本 (在區役所申請&amp;quot;転出屆&amp;quot;，就需要一併申請了) 銀行證明 (帳戶能和護照名字對的起來的證明文件)：台灣外幣戶頭影本+銀行章+銀行提供的外幣匯入匯款指示書 國民年金手冊(正本)    詳細申請流程參考：
 https://www.jpsmart-club.com/zh_tw/lump-sum-withdrawal-zh-tw/ {日本打工度假}厚生/國民年金一時脫退超詳細申請攻略大全！！  註：2022/05/13 用掛號寄出。
2. 收到 脱退一時金決定通知書 TBD
參考資料  http://www.tuixiu40.com/taxation/notax/6445 http://www.tuixiu40.com/taxation/notax/6482 https://road-to-entrepreneur.com/refunding-income-tax-from-returned-money-of-ending-kosei-pension-insurance-jp.html http://yam-taxcats-blog.com/2019/06/17/tax-foreign-workers-retirement/  </description>
    </item>
    
    <item>
      <title>在疫情中，離開日本之回台紀錄</title>
      <link>https://bestsamina.github.io/posts/2022-04-27-leave-japan/</link>
      <pubDate>Wed, 27 Apr 2022 17:00:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2022-04-27-leave-japan/</guid>
      <description>前言 在日本工作 2 年多，體驗了在國外一個人從沒有什麼朋友到結識一群很不錯的人。在語言不通的情況下，還是一個人努力的生存下來。雖然遇到不少不便的事情，但也被很多好心人士幫忙化解了。
2019 年 10 月底開啟我在日本工作的序幕，2020 年 2 月底到 10 月因為 Covid-19 疫情回到台灣短暫遠端工作，2020 年 10 月到 2022 年 4 月待在日本遠端工作。
在 2022/03/14 接收到口頭 offer、2022/03/16 接收到正式 offer letter 後，因為 paid leave 蠻多的，剛好可以在這段休假期間，開始我的搬家之旅。
時程安排 重點處理事項 決定最終出社日 提離職的時候，也確認最終出社日。
訂機票、防疫旅館、PCR檢查預約  訂機票：確定最終出社日，加減算一下，檢查一下班機與下份工作的預訂到職日，就訂機票了。 防疫旅館：因為聽到蠻多都說蠻難訂的，所以就盡快訂好。 PCR 檢查預約：預訂回國前一天至TMCサテライト日本橋的這間，上午約 10:00-10:30 採樣，下午 19:00 左右可以拿到結果。直接在辦理登機報到時，看 MySOS 的結果即可。  解約  房子租約: 一個月前預訂退房
當時是訂 leopalace21，有支援中文服務，網路上申請退房日後，會寄 Email 說明接下來需要注意的步驟，主要是訂定&amp;quot;退室日は室内での立会&amp;quot;的時間，以及一些相關注意事項。 電気・ガスの閉栓
我是使用東京ガス的服務，有線上的解約可以使用，不過我的沒法使用只好打電話。當時使用中文服務，等了 45 分鐘後接通。(水道時皆是付在房租裡，所以不用處理)
相關連結：よくあるお問合せ、客服 火災保険解約
它一開始會扣，打電話去解約時，會確定退房日，之後會結算把多扣的錢退到戶頭。 インターネット解約
我的是 Wifi 機，直接線上解約，寄出機器即可。 手機門號解約</description>
    </item>
    
    <item>
      <title>[讀書紀錄] 擁抱 B 選項</title>
      <link>https://bestsamina.github.io/posts/2021-10-30-optionb/</link>
      <pubDate>Sat, 30 Oct 2021 12:00:35 +0900</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2021-10-30-optionb/</guid>
      <description>前言: 雖然大致翻過書時，多數會覺得蠻多道理是都懂的，但會想讀的原因是，別人的人生故事，總是可以成為個人生命中的養分，當陷入只有 B 選項時，道理不見得能幫助自己，但別人的故事是可以激勵自己的。
這也是會讀這本書的原因。
人生不如意十之八九，當擁有了從書中面對逆境的養分，遇到時，是能夠成為支持自己的後盾。
書名：擁抱B選項 作者：亞當‧格蘭特（Adam Grant）, 雪柔‧桑德伯格（Sheryl Sandberg） 譯者：齊若蘭 出版者：Common Wealth Magazine Ltd, 2017 ISBN：9863982830, 9789863982838 電子書
讀後感: 即便很努力地生活著，有時也不是如我們所意的發展著。 當挑戰或巨變來臨時，如何面對，也是個課題。 書中的脈絡大致如下：
 遇到生活上的巨變 會有的反應 走出陰影 給予自己信心 微笑面對並擁抱美好  每個段落，作者都分享了自身的故事，搭配他人生中遇到別人的故事，並搭配數據與理論。
在如何克服的部分，有幾個點是能夠刻在心裡的。
 面對挫折的三個阻礙復原因子：把問題個人化，認為是自己的錯 / 普遍性，認為生活各層面都會受影響 / 永久性，認為事情造成的衝擊是永久的。   即便如此，我倒是想將這個視為一種過渡，知道會有這些反應，是很正常的。陷入絕境，這反映總覺得正常。只要記得，有這些反應就是開始慢慢過渡到絕處逢生的處境。
  替換永久絕望的詞語。永不、一直、總是等詞語調整為有時候、最近。 向自我人際內圈提供安慰，向自我人際外圈尋求支持。 坦承自己的不完美，是對自己仁慈。   人生努力活得完美，也是人之常情。但在一些事情上面，有時抱持著『我就爛』是能夠調節身心的。而有時這樣的放鬆，也是能帶來意想不到的收穫的。
  創傷後的五種不同成長形式：找到個人力量、懂的感激、形成深厚友誼、找到人生意義、看到新的可能性。 韌性的核心信念：可以控制自己的人生、能從失敗中學習、自我很重要、擁有可依靠與可分享的力量 遺憾是因為沒有行動，而不是行動失敗  搭配最近看的影集 Maid ，其實也能應證人的潛能是無窮的。而艱辛的克服艱難的處境，最後能嚐到的果實也是甜美的。抱持著希望，也是能在 B 選項中活得漂亮。</description>
    </item>
    
    <item>
      <title>[讀書紀錄] 灰階思考</title>
      <link>https://bestsamina.github.io/posts/2021-05-01-grayscale-thinking/</link>
      <pubDate>Sat, 01 May 2021 23:32:35 +0900</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2021-05-01-grayscale-thinking/</guid>
      <description>前言: 關於投資理財，覺得自己還算幸運，出生在一個從小就能夠耳濡目染的家庭。
也因為從小就能夠吸收如何投資和理財的一些概念，看著家人如何從如何研究看好一家公司，如何在股市的起伏中獲利，在旁邊看了 20 多年的我，也在內心也慢慢內建了一些投資心態。
雖然一成年，就被家人拉去開證券戶，但自己手上持有的股票，其實還是家人幫操盤。自己投資的資金其實是不關心的。但也在前年全都出清了。
去年開始，也才開始真的正視自己的理財部位，開始踏上股市菜雞一路。
在台股，因為白天懶得看盤，以 0050 base 的基金為主，定期定額。
而後，無意間注意到股癌 podcast，除了開始對美股產生興趣外，也對於很多投資心法認同無比。
不過即便認同，在今年開始我的美股菜雞之旅，才發現自己以為自己的定性，在頭 2 個月也是付了一些學費。
在得知&amp;quot;灰階思考&amp;quot;這本書的問世後，決定要來好好把在股市的前輩經驗吸收起來。
灰階思考 作者：謝孟恭 出版者：遠見天下文化出版股份有限公司, 2021 ISBN：9865251205, 9789865251208 出版日期：2021年4月20日 語言：繁體中文 電子書
讀後感: 1. 阻礙思考障礙物去去走 在投資的世界裡，沒有不可能。平常心與臨危不亂的謀略將克服一切。
 世界上恆久不變的就是會變 不感情判斷：自以為的『漲多必跌，跌多必漲』，其實看過去紀錄，不見得是這樣的。漲也可能更漲，跌也可能跌到下市。 不求神問譜：疑惑與壓力將會使人依賴，依賴神明、依賴 3F (Family, Friends, Fools) 成為自己在股市中的諸葛亮：清醒的腦袋、沈著的判斷，才有在股市中擁有好的謀略。 排除雜訊，並向領域中的強者大大學習。 我可以算出天體運行的軌跡，卻無法計算出人性的瘋狂。- 牛頓 知己知股，百戰勝多  知己：別一昧跟風，大師之所以是大師，是因為他們很懂自己，知道自己承受的風險在哪，因為知道自己的耐受度，才能更冷靜的判斷自己的每一步棋要怎麼佈局。 知股：  個股：財報反映過去。如同一個學生都一直成績吊車尾，但你不知道他下次就拿第一名。反而更要注意公司的未來潛力。 持股：分散風險、分散風險的大道至簡：ETF、不單壓。   知投資：投資之三大因子+隱藏加分：『本金、報酬、時間、投對胎』    2. 建構自己的 Deep Learning IPO system IPO model (input–process–output)
 Inputs:  原形知識：越純粹的來源，才能讓腦袋的吸收健康。加工知識，如同加工食物，對自己的認知是會有負擔的。財報、上市公開說明書讚讚。 大師 pattern：如同下棋，我們總喜歡學習高手的下棋思路，看在股市的大師的書、發表等，可以不斷更新我們的判斷思維且變得更優秀。 同溫層：把強者大師變成自己的同溫層，並保有開放的心態，擴充新的同溫層。   Process:  Default: 股價由市場決定。 大膽的假設，小心且謙卑的求證。 需要有 dynamic adjustment：觀念和知識都要靈活，隨著自己的狀態調整。當新的東西出來，一定會有一堆雜音。此時需要意識到當自己喜舊厭新，則要謹惕自己。真正的大師不是堅持以往的想法，而是不斷的迭代，這樣的系統才會一直變好。 保有進可攻退可守的彈性。 需要有 exception: 要對最壞的結果做出最好的準備。 認定自己看準時，也要讓自己冷靜的以旁觀者清態度再次檢視該決定。避開盲點。 定義保有該標的的理由。 大師特質：  樂觀：「觀」其問題與不足，「樂」於面對挑戰 耐心：投資不急於一時，先別急著吃棉花糖，耐心是一切聰明才智的基礎，慢慢來比較快（年複合成長率15%挺好的 - Chamath Palihapitiya），不急躁、不厭煩、不躁進 承擔風險（壓力測試）：不禁一番風徹骨，焉得梅花撲鼻香。失敗為成功之母。從錯誤中學習，堅韌自己的心性與判斷力。     Output:  投入股市。 在股市中修煉心性，如同在使用者回饋中，讓系統變更好。    系統維護與更新</description>
    </item>
    
    <item>
      <title>[讀書紀錄] 也許你該找人聊聊</title>
      <link>https://bestsamina.github.io/posts/2021-04-25-maybe-you-should-talk-to-someone/</link>
      <pubDate>Sun, 25 Apr 2021 17:48:35 +0900</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2021-04-25-maybe-you-should-talk-to-someone/</guid>
      <description>前言: 在看去年大家推薦的書單，很多人都有推薦這本書。
作為一個喜歡聽故事的人，不論是透過認識的人中聽到的，從書上看到的，我相信每個人的故事都是能帶給我不同的養分。
再加上作者有擔任過編劇以及她在 TED 演講 中的分享。 讓我不禁好奇這本書中有哪些人的故事以及可以帶給人的啟發。
也許你該找人聊聊: 一個諮商心理師與她的心理師,以及我們的生活 作者：Lori Gottlieb 譯者：朱怡康 出版日期：2020/03/31 出版社：行路 語言：繁體中文 ISBN：9789869804097 電子書
內容簡介: 故事線 1
作者本身的故事以及他找諮商心理師諮詢的故事。
曾擔任急診室的春天與六人行的編劇，因為長跑急診室見習，進而讀了醫學院，開啟諮商心理師之路。
未婚試管生子，也和原本的男友有一段穩定的關係。
在即將討論結婚之際，與男友分手。而踏上找溫德爾諮商。
故事線 2-5
作者的四位諮詢者。
 茱莉：33 歲大學教授，蜜月後卻得知罹癌，且被宣告天堂將近。在抗癌後，意外懷孕，但隨之而癌是癌症復發且小孩也沒了。只能把握當下好好的把時間花在愛自己與自己愛的人。 麗塔：70歲的人，即有藝術天賦且與人善良，但因曾經自己覺得的失敗，導致即便離幸福很近了，也因為害怕受傷，選擇用不配得感來拉住自己。透過作者和諮詢者一起編輯人生，開始接納自己與和自己和解。 約翰: 著名編劇，在生命中失去了很多摯愛。因為一直沒有好好的面對傷痛，導致關係緊張。但也因為太痛了，所以一直以堅強的外表努力的活著，透過和作者慢慢建立的信任感，到後面也才漸漸地解開心結。 夏綠蒂：對工作厭倦，有酗酒問題。但渴望與人有連結。透過作者的幫助下，漸漸地修復與家人的關係也開始正面迎接人生。  心得: 不得不說，不愧是 Lori Gottlieb 曾經擔任過編輯，故事真的是安排的很妥當，銜接之處也恰到好處。如果是喜觀聽故事的人，也想要透過書中人的故事得到療癒，相信閱讀這本書後一定會愛上。
看完這本書後，我更深切的認同 &amp;ldquo;每個人都有史詩般的故事&amp;rdquo;，『藏在他們負荷和渴望糾結的某處』。原本就很能認同每個人的故事都不一樣，即便一個認識很久的朋友，我們總是只能認識他某個面向。畢竟連自己可能都不認識自己了，怎能說能完全的了解一個人呢？
但看完這本，更能了解，即便一個人多樂觀多堅強等等，你我都不見得都能知道他遭受到的苦痛。
在這些故事中，能深刻了解到為何真的是也許該找人聊聊。
看了茱莉的故事，才知道一生努力很久的成就，因為有限的生命，才知道什麼心願是該把握的。甚至還跑去超市打工。而一輩子的努力，其實就是想要沈浸在愛與幸福中。
即便看起來成功的人，因為曾經的重大傷痛，也會封閉內心，陪伴後所產生的信任感，是能幫忙度過這心結的。
人都會犯錯的，即便在精密的鐘錶，也會有一天不準的。只要知道自己不會重蹈覆徹，就該和自己的內心和解並接納屬於自己的一部份。
題外話的是，作者的人工受孕當媽媽，讓我覺得超棒的。
可惜看了台灣法律，才發現現在沒辦法根本無法做到這件事。即便可以決定自己的卵子用凍卵保存，但能人工受孕的條件卻是有條件的。希望哪天台灣法律也能通過。
金句之筆記(有些融入自己的文字修飾)  正視你的感受，不要認為自己應該如何，而是去調整你的感受。這先感受都會在，就迎接他們吧，因為他們有重要線索。(小改) 人往往要到死亡逼近才會想到心願清單。 可同情對方，但不原諒。 對快離世的人可說： 『這實在讓我難過』、『有沒有我能幫忙的地方』、『我不知道該說什麼』、『我不知道幫不幫的上忙，可是我關心你』、『如果你想談談，或是者點樂子，隨時打電話給我』、『oh, xxx』。好的回應都是那些真誠不造作的人說的。 (小改) 痛苦就是痛苦，沒有等級之分。 人無法藉著貶低痛苦來克服痛苦。想克服痛苦，就要接受它，想出處理它的辦法。 生命中有太多沒有答案的事，我必須學會接受無法掌握自己的未來，學會排遣煩惱，學會活在當下。 也許往事留給我們的不是限制，而是見識。正是因為這些風浪，才有現在淬煉出來的餘韻。(小改) 我們是在與他人的連結裡成長的。  </description>
    </item>
    
    <item>
      <title>2020 in retrospect and prospect</title>
      <link>https://bestsamina.github.io/posts/2020-12-31-2020retrospect/</link>
      <pubDate>Thu, 31 Dec 2020 16:30:02 +0900</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2020-12-31-2020retrospect/</guid>
      <description>2020 回顧 回顧 2020，對比去年的目標
 1 個未達到 3 個還要更努力 2 個有還算達到標準  看起來是挺廢的一年，但還是記錄一下。
 在日遠端工作至今已達 10 個月，其中有7個多月在台灣遠端工作 辦公室探險：新宿總部、NEX 新宿、台北內湖、京都(今年2月達成) 在日本用全英文申辦 My Number Card 順利完成 今年完成書單：『82年生的金智英』、『向生命說Yes！』、『鯨吞億萬』、『唐鳳：我所看待的自由與未來』 認識日本：COVID-19 疫情爆發前-河口湖賞富士山、箱根、河津櫻；疫情爆發後-仙台、武藏丘陵森林公園 人生第一次被當封面照 https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2021/ 開啟每個月的 NGO (無國界醫生) 之旅 花許多時間，和家人一起到多個地方出遊 和高中好朋友一起到屏東海生館過夜 整年都沒進電影院的一年 (雖然原本覺得在日本也不會進電影院，但在台灣也沒有 XD 說好的”天能”，只好看哪天 Netflix 看有沒有出來) 擁有自己的 Nintendo Switch 和 健身環 (感謝好朋友幫忙買到) 在台灣期間，完成 3 劑貴桑桑的 9 價 HPV 疫苗。(怕泡溫泉感染而打的) 人生第一次做『新冠病毒核酸檢測』，在台灣採『咽拭子採樣』，在日本看著酸梅努力的產生唾液之『唾液採樣』 在日本小窩，無師自通收納術，增加可以在地板上打滾的空間   2021 展望  不論如何，都要活得好好的 日本工作順利 多寫點技術文章 好好學日文，通過日檢 (如果能夠讓我考到試的話 Orz):
讓我看得懂如何在日本買股票，知道如何好好在日本一個人玩不要總是靠別人 保持閱讀習慣 疫情結束，希望能好好地探索日本 持續加強英文能力 學會 3 道拿手甜點   總結 今年外顯上的技能點是沒有很明顯的，畢竟大多數時間都貢獻給公司了。</description>
    </item>
    
    <item>
      <title>台灣上網卡比較</title>
      <link>https://bestsamina.github.io/posts/2020-04-05-compare-unlimited-data-sim-cards/</link>
      <pubDate>Sun, 05 Apr 2020 16:48:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2020-04-05-compare-unlimited-data-sim-cards/</guid>
      <description>使用心得 因為 2019-nCoV 疫情的關係，目前從日本回到台灣 Work From Home。但因為在台灣綁約的手機上網流量每個月只有 1G 的限額，而自己又是個重度網路使用者，因此需要買在台灣使用的上網卡，替換日本門號的那隻手機。
也做了這個比較。(使用手機型號，Pixel 3a)
目前嘗試過的網卡選手們如下：
1. [Want Card] 3 天不降速吃到飽 - 中華電信
Speedtest 測試，大約平均在 2.9 MB
(依據說明書，開啟”行動數據”與”數據漫遊”，即便網路是自動選取”中華電信”，但看來是走漫遊上網。)
2. [Want Card] 30 天不降速吃到飽 - 台灣之星
Speedtest 測試，大約平均在 20 MB 比較     上網卡 電信 speedtest     1 [Want Card] 3 天不降速吃到飽 - 中華電信 中華電信 2.5 MB   2 [Want Card] 30 天不降速吃到飽 - 台灣之星 台灣之星 20 MB    </description>
    </item>
    
    <item>
      <title>[讀書紀錄] 82年生的金智英</title>
      <link>https://bestsamina.github.io/posts/2020-01-13-book-1982-kim-ji-young-born/</link>
      <pubDate>Mon, 13 Jan 2020 16:48:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2020-01-13-book-1982-kim-ji-young-born/</guid>
      <description>前言: 因為韓國的電影關係，一直有聽說這本書，不過也沒有抽時間去看電影，而且也一直很害怕讀這本書，因為預想自己在讀的時候可能會很憤怒。不過因為和網友聊天中，看到對方的已閱讀清單，也就促使自己買下去了，並在搭飛機的時候一口氣看完。
82年生的金智英 作者： 趙南柱（조남주） 出版社：漫遊者文化 出版日期：2018/05/03 語言：繁體中文 ISBN：9789864892709 電子書
內容簡介: 1982年生的金智英，因為在婚後，辭職擔任家庭主婦時期，發生行為異常，導致她的丈夫讓她接受心理治療，而揭露她從小到大所接受到的不公平待遇。
心得: 看著「82年生的金智英」一書，真的是既憤怒又想哭。憤怒的是，明明都是人，為什麼卻有這樣的不公平遭遇。而且很多都不是只要努力就可以解決的。想哭的是，為什麼那麼的不公平。 沒錯，因為看清自己就是在這個認知的洪流下的社會，所以格外感慨。就好比，有人是含金湯匙出生，有些人從小就需要生活的格外辛苦。
即便身在台灣，也已經很尊重性別的差異，從小到大還是多少會感受到書中的陰影。 包含穿衣、小時候不能太晚回家但弟弟可以、言語的歧視、幾年前聽聞的針孔事件、抑或是輔大的性侵事件&amp;hellip;.等。
而現在是我在職場打滾的時期，在台灣這樣的感受差異不大(雖然偶爾還是會在介紹自己時，對方用&amp;quot;女生&amp;quot;讀資工等話題來寒暄，讓我內心打上上萬個問號)，不論是待遇或遭遇，大多數還是以能力取勝。不過在許多公司中打滾一番中，書中的金智英在職場中的遭遇與待遇，仍然多多少少都能體會到。 有時候真的很憤怒，為何自己不是男生，明明都是人，都有手有腦，能力表現也不差，為什麼就會有這樣的差別。越是這樣想，也只能越努力去證明自己。 不過幸好在職場時期，努力和企圖心，我相信還是可以不分男女，畢竟只要是人就可以達到。因為居里夫人和 Ada Lovelace ，都讓我深信一件事，也就是『去他的！性別差異！』，因為這告訴我，在專業領域上，沒有什麼事情是努力不能辦到的！ 不過如果是聰明才智或是厲害的家庭背景，就另當別論了。
而文中金智英養育孩子階段，卻是目前尚未經歷的，也是自己一直害怕的。看著媽媽，也看著像是陶晶瑩、Marissa Ann Mayer、賈靜雯&amp;hellip;，總覺得好像還是可以保有且可以繼續在自己喜歡的領域悠遊，但又深怕其實會有很高的百分比是如同金智英的情形。
雖然總是想著家庭明明就是兩人共同組成的，應該是兩人要一起努力經營。但誰能料到到底是不是真的如此呢？在看到這幾天沸沸揚揚的純靠北工程師一文，就覺得自己未來的(可能)婚後生活其實挺模糊的 XDD (不過，依目前看來是不會發生此事情的啦！ XD)
一直以來，自己總是秉持技術不分男女，技術社群其實也沒必要特定參加女性社群。甚至覺得一些報章雜誌寫的職位再加上&amp;quot;女&amp;quot;真心很不以為意，什麼女科學家、女工程師、女總統、女CEO等。工程師就工程師、科學家就科學家，就直接尊重個體即可，因為我們不會講男工程師、男科學家來報導該人，同理可證。
然而，即便如此，這就是目前社會的主流價值觀。 我很欣慰最近美國的選美比賽，也開始意識到什麼才是美，而不是身材等，覺得這是很好的一個改變。 我相信這個世界會越來越平等，但同時，在這時代洪流的生長的女性，也真的是辛苦了。
「82年生的金智英」很推薦每個人都看，不論你是有女兒的爸爸，還是有姊妹的兄弟，請多想想和還你一起在讀書時光的女同學，是不是都很不錯。然後如果有自己的女兒，希望她被怎麼樣尊重的同時，是不是也可以開始從自己身旁共識的女性同事來著手。 然後，女性來看，也可以想想是不是有時自己都過度的在這個洪流的社會價值觀下導致也貶低女性自己了。 這本書的反思性很強，但我相信越多人尊重彼此，這社會會越棒。
 不過即便如此，生活在這社會，在加強專業持續努力的同時，也要隨時警戒並顧好女性自身的安全呀！ Orz
  還是有好多好多心得，不過就這樣吧！ XD
 </description>
    </item>
    
    <item>
      <title>2019 in retrospect and prospect</title>
      <link>https://bestsamina.github.io/posts/2019-12-31-2019retrospect/</link>
      <pubDate>Tue, 31 Dec 2019 07:00:02 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-12-31-2019retrospect/</guid>
      <description>2019 年嘛，總覺得自己好像沒什麼長進 Orz ，但還是做個紀錄，警惕自己，告訴自己應該要不斷的向前努力。
1. 碩士畢業 上半年的時間，幾乎都貢獻給碩士論文、計畫，程式寫得並不多，投影片和紙本寫的數量到很多的時期。然後就這樣畢業了。畢業之後，在協助交接自己論文的東西，基本上就這樣度過了。不過也是達成去年的目標。
2. 從找在台灣外商分公司的工作，變成目前在日本總公司工作 這邊真的感謝 Evan Lin 的鼓勵，其實一直覺得自己英文不怎麼好，找外商是因為想要自己創造學習英文的環境，但沒想到的是也因此誤打誤撞的就跑到了日本。
就此開啟了自己的視野。目前也都還在學習與上手中，也希望未來有天，可以和大家分享這樣的歷程。
 今年也就這樣到了最後一天。經過樸實無華的 2019 年， 2020 年覺得需要多一點努力的目標。
1. 加強英文能力 英文口說是有比去年進步一點點(畢竟為了外商面試，也是投資了自己線上的英文會話課程)，但還是不夠，仍然要更加強。希望在明年，可以很流利的說出想表達的語句。
2. 繼續努力深入研究要專精的領域 持續在雲端和網路領域深入囉！
3. 學會日文 畢竟在日本生活，還是需要學會日文，雖然工作場合不會太需要用到，但畢竟公司有免費學習的課程，還是要去學習囉！
4. 在大型研討會分享所學 這件事不知道能不能達到，畢竟目標有點大。但看著今年自己在 speakerdeck 只有一份在 Meetup 上分享的 Slides ，覺得今年真的不太行。
所以，想說還是要給自己大一點的目標去努力。
5. 看書 今年目標原本是 6 本書，結果只有 3 本，現在人在日本，也沒啥在地朋友，也許正好可以開啟閱讀的習慣了 XD
6. 多多認識日本 人生第一次到日本本島，當然要當個到處觀光的觀光客呀！到處探險看美景，享受生活啦！
期許自己越來越好囉！ :)</description>
    </item>
    
    <item>
      <title>邊緣運算之容器管理工具 - K3s 之介紹與玩耍</title>
      <link>https://bestsamina.github.io/posts/2019-10-10-k3s-intro-and-play/</link>
      <pubDate>Thu, 10 Oct 2019 16:48:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-10-10-k3s-intro-and-play/</guid>
      <description>前言 Kubernetes 是雲原生技術 (cloud-native technologies)，也是雲原生計算 (Cloud Native Computing) 重要的技術之一，而且在使用 Kubernetes 時，應用的硬體資源通常也比較好。然而， 容器 (Container) 技術的崛起，也帶動了邊緣運算 (Edge computing) 導入 Container 技術的風潮。
邊緣運算顧名思義就是將應用程式等服務運算，由網路中心節點，移往網路邏輯上的邊緣節點來處理。也就是從網路中心節點處理大型服務來分解，切割成更小、更容易管理的部份，分散到邊緣節點去處理。可以想像，如果網路中心節點的角色如同總經理，邊緣節點的角色如同部門經理，而終端裝置的角色如同基層員工。在這架構下，想當然耳就是個分散式架構，而邊緣節點因為更接近於終端裝置，因此可以加快資料的處理與傳送速度，減少延遲。如同基層員工直經回報部門經理，而重要的資訊，部門經理再回報給總經理一樣。也因此在邊緣運算的應用中一直都有重要的應用場景在，例如大家常聽到的 IoT。
當邊緣運算節點硬體效能越來越強，能做的事情當然也就可以越來越多，即便是個嵌入式主機板，也是可以跑很多應用程式的 Container 的。然而有了越來越多的容器，當然也需要厲害的 Container 管理工具。
K3s 就是在這需求下誕生的產品。
K3s 介紹 K3s 簡介 K3s 是由 Rancher Labs 推出的 輕量化 Kubernetes 開源專案，也是 CNCF 官方認證的 Kubernetes 發布版本。而且是以產品設計出發的，讓管理者在設備資源有限的環境下，仍然可以良好的運作 Kubernetes，並管理 containers。因此，在這優勢下，K3s 可以很好的應用在 Edge, IoT, CI, ARM 等情境、環境下。
它所需的系統資源並不多：
 在 Server 端： 只需要 512 MB 的 RAM 在 Node 端：只需要 75MB 的 RAM Disk 大小只需 200MB  而且可以用在 x86_64, ARMv7, ARM64 等平台架構。</description>
    </item>
    
    <item>
      <title>[讀書紀錄] 孤獨的冷漠 x 十三歲後，我不再是我</title>
      <link>https://bestsamina.github.io/posts/2019-09-29-book-avoidant-attachment/</link>
      <pubDate>Sun, 29 Sep 2019 16:48:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-09-29-book-avoidant-attachment/</guid>
      <description>前言: 偶然看到海苔熊分享性單戀(Lithromantic)的內容，在了解其背後原因可能是因為逃避型依戀所造成的。再加上透過一些心理量表與華人心理治療基金會提供的人際關係依附量表檢測發現自己可能是屬於逃避型依戀，就開始研究並讀『孤獨的冷漠』了。而另外一本『十三歲後，我不再是我』則是在海苔熊的文章中剛好看到，當中也有一些逃避型依戀的情形，也就好奇一起看了。
(圖片參考 博客來 )
孤獨的冷漠：逃避型依戀障礙的分析與修復 作者： 岡田尊司 出版社：聯合文學 出版日期：2017/05/15 語言：繁體中文 ISBN：9789863232124 內容簡介: 在書中提到許多會產生逃避型依戀的原因，而在書的後半部，有寫說要如何修復，包含：暴露療法、正念與認知療法、接納與承諾療法。
心得: 如果遇到覺得對方很難親近的人，也許他們真的是不知道要怎麼放心的和人真心的親近。書中有分享一句話，就是對方不願回答，那就和對方說『不用回答也沒關係』。這句話真的是很棒。會讓人從原本很為難緊張的心裡變得很放鬆。所以這是一本很適合想要自我找到方法修復，以及想要和這樣的朋友交流的人讀的書呢！不過在『沒有期待沒有傷害』與『抗拒被受傷的機會，也抗拒了快樂的機會』之間的選擇，總覺得快樂還可以透過其他方法獲得，但受傷很難好起來。還有什麼可以打破這個固有的想法呢？ XD
 (圖片參考 博客來 )
十三歲後，我不再是我：從逃避到挺身，性侵受害者的創傷修復之路 作者： 山本潤 (Jun Yamamoto) 譯者： 游韻馨 出版社：三采 出版日期：2018/06/01 ISBN：9789863429944 電子書：https://play.google.com/store/books/details?id=ViqjDwAAQBAJ&amp;amp;pcampaignid=books_web_aboutlink
內容簡介: 在書中，作者講述她小時候的家庭狀況與遇到父親的性暴力情形，以及之後她修復路程。並在文中穿插專業的建議。
心得: 其實看這本書是很沈重的，和『房思琪的初戀樂園』是一樣的，可以想見那種痛。這本書不到 200 頁，在半夜買的看了超過一半，隔天早上邊吃早餐邊看完。而在半夜看的時候，是邊哭邊看的。雖然還是很難想像，心中這麼痛的傷口，能講出來的勇氣是從哪裡來的。不過著實佩服作者的勇氣。如果想要了解如何療傷，書中也有提供台灣的諮詢管道與相關法規。是還蠻受用的一本書。</description>
    </item>
    
    <item>
      <title>日本工作簽證辦理紀錄</title>
      <link>https://bestsamina.github.io/posts/2019-09-11-japan-working-visa/</link>
      <pubDate>Wed, 11 Sep 2019 16:48:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-09-11-japan-working-visa/</guid>
      <description>人生第一次辦理日本工作簽證，所以這邊紀錄一下。
 2019/06/28  收到在日本外商公司寄的 Email 信件，信件中說明要準備一堆相關文件，並且填寫 VISA Checklist 的表格。
 2019/07/11  將文件準備齊全，並且將文件透過航空函件寄至在日本的外商公司。
P.S. 可能是因為日本申請簽證的關係，重拍的大頭照，要另外洗 40mm x 30mm ，才符合它的 Checklist。
 2019/07/19  日本外商公司的 Overseas Support Team 寄 Email 說他收到文件，並且會開始進行簽證的處理。
 2019/09/02  日本外商公司的 Overseas Support Team 寄 Email 說我的 Certificate of Eligibility (CoE) 已經審核通過，並和我確認她即將寄信的地址是否正確。
我當日回覆確認的寄信地址。
 2019/09/03  日本外商公司的 Overseas Support Team 寄 Email 提供 EMS Tracking 編號，並且在 Email 中提供日本台灣交流協會-事務所會需要的相關資訊。
 2019/09/06  收到我的 CoE，並回信給日本外商公司的 Overseas Support Team。 (收到的日本工作簽證效期是 5 年)</description>
    </item>
    
    <item>
      <title>[TIL] 在 Ubuntu 16.04 改變網卡速度</title>
      <link>https://bestsamina.github.io/posts/2019-03-23-til-change-speed/</link>
      <pubDate>Sat, 23 Mar 2019 14:33:14 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-03-23-til-change-speed/</guid>
      <description>網卡限速設定參考：https://www.shellhacks.com/change-speed-duplex-ethernet-card-linux/
不過不曉得為何在 Ubuntu 16.04 中 ethtool 的指令不能 work。
以下是記錄可以 work 的方法。
 原本的 Network Interface 狀態  ens11f0 沒有接上網路線，ens11f3 有接網路線 所以 Speed 和 Duplex 有接上網路線的就有顯示。 不過 ens11f3 這樣還是不能和 100Mb/s 的互相 ping 成功，Link detected 也顯示 no，interface 也是 DOWN 的。
$ sudo ethtool ens11f0 Settings for ens11f0: Supported ports: [ ] Supported link modes: 10000baseT/Full Supported pause frame use: Symmetric Supports auto-negotiation: Yes Advertised link modes: 10000baseT/Full Advertised pause frame use: No Advertised auto-negotiation: Yes Speed: Unknown!</description>
    </item>
    
    <item>
      <title>[TIL] VPP 相關 Troubleshooting 紀錄</title>
      <link>https://bestsamina.github.io/posts/2019-03-08-til-vpp-troubleshooting/</link>
      <pubDate>Fri, 08 Mar 2019 14:33:14 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-03-08-til-vpp-troubleshooting/</guid>
      <description>VPP 目前只能使用 2M 的 Hugepage 依據目前以下的兩份文件，是建議使用 2M 的 Hugepage，自己測試時，即便已經宣告 1G 的 Hugepage 是沒辦法執行的
 https://fdio-vpp.readthedocs.io/en/latest/gettingstarted/users/configuring/hugepages.html https://media.readthedocs.org/pdf/adenisco-vpp-docs/vpp-13957/adenisco-vpp-docs.pdf - 2.1.2  安裝 VPP 後，DOWN 的 Network Interface 使用 ifconfig (or ip a ) 會看不到。 在這之前，不僅安裝了 VPP ，還更新 i40e 的 driver
在眾多的程序後，發現 ifconfig 看不到那些有支援 SR-IOV VF 的 interface，以為是 driver 被我更新更新到壞掉了。
一直重新 make install driver 但還是沒效。
仔細一看，發現 igb 的另外一個 DOWN 的 Network Interface 也不見了。 不過硬體資訊有看到
$ sudo lshw -class network -businfo [sudo] password for winlab: Bus info Device Class Description ========================================================= pci@0000:01:00.</description>
    </item>
    
    <item>
      <title>王永福老師《教學的技術》新書見面會 (新竹場) 心得紀錄</title>
      <link>https://bestsamina.github.io/posts/2019-03-06-teaching-technology/</link>
      <pubDate>Wed, 06 Mar 2019 23:59:35 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-03-06-teaching-technology/</guid>
      <description>時間：2019-03-06(三) 18:30 ~ 21:30
地點：新竹市東區大學路1001號 (國立交通大學浩然圖書館B1國際會議廳)
活動資訊：https://www.accupass.com/event/1812210828339226451130
 現況與參與動機 從去年開始，上台分享所學的技術的機會越來越多，甚至到企業的教育訓練都有。就在前幾個禮拜，也在課堂中分享近兩個小時的 container 技術和 Kubernetes 給修指導教授課的同學們 (這兩個小時的課還挺臨時的，投影片和備課只能花費 2 天來趕工。)。
我很感激有這些機會能夠分享所學，不論是透過演講、教育訓練等。然而心中總是有一個疑惑，就是我可以好好地講我知道的東西，然而聽的人真的聽得懂嗎？我並不知道！雖然有些人會問問題，但其他人呢？我希望的是大家都能夠有收穫，但真的是在我這個分享的時間中，大家都並不覺得是浪費時間都有收穫嗎？這問題其實一直困擾著我。
就在這活動報名期間，看到凍仁翔 大大在 Facebook 上的 PO 文，在看到交大生優惠，我決定給自己一個機會，來聽聽看。
但說實在的，很多演講很厲害的大師們，大多數都有著自身的人格魅力，演講精彩，是可以想見。但如果我沒有自己的風格呢？
在參與這場講座之前，我只抱持姑且聽聽，畢竟講軟實力的書和演講也很多，到底所謂的 《教學的&amp;quot;技術&amp;quot;》 是真技術，還是就是，喔！要培養軟實力呀！ 總之就是半信半疑的來看看了！
而在自己的內心中，也對所謂的 &amp;ldquo;技術&amp;rdquo; 下了個定論：這是個教學法，我是可以複製的，它是可以被學習的，它是有理論的，而擁有了這項&amp;quot;教學的技術&amp;quot;，就可以帶給未來參加我的技術分享的與會者有很棒的收穫的！
參與紀錄 因為是報名交大生的優惠票，所以就沒有買書。這邊真的要感謝 凍仁翔 大大 直接將他的套票中的書送給我。而且還是有 王永福老師 的親筆簽名呢！
因為不認識王永福老師，所以抱持著不期待不受傷害的心態來聽。畢竟期望越大，失望也可能越大，所以把心中的水杯清空來聽，就是最安全的。
王永福老師的一開始開宗明義的告訴我們為何辦簽書會以及我們會得到什麼收穫。也介紹他自己。而在一開始，有注意到王老師的簡報風格多數是照片配文字，且字並不多，呈現的幾乎是重點。
在這場演講中，他分三個案例：
教學：分享三種教學法。
分享：實際使用老師的 教學技術 的 &amp;ldquo;學習看 X 光片之教學&amp;rdquo;。
修煉：給予大家建議和參考。
而在教學案例中，王老師分三個實際的教學法：
第一種：老師很常會用的教學法，通常不會問學生問題 (問：&amp;ldquo;到這邊有問題嗎？&amp;rdquo; 這種問題自認為不算。)
第二種：有互動的課程 (使用分組)
第三種：幫參與的人創造一個投入的理由，讓大家投入到整個課程中。
接著是一位馬偕醫院的醫師使用&amp;quot;教學得技術&amp;quot;教大家&amp;quot;如何看 X 光片&amp;quot;。
敬佩的是因為他的教法，就連我這個不能考進醫學系的人都知道如何看 X 光片！而且花費的時間真的不多。
只要使用&amp;quot;來&amp;quot;、&amp;ldquo;找&amp;rdquo;、&amp;ldquo;查&amp;quot;三步驟，即會看 Ｘ 光片。
 來辨色  越硬越白 空氣最黑 &amp;gt; 肺臟 &amp;gt; 液體 &amp;gt; 骨頭 &amp;gt; 金屬最白   找正常  找 R (or L) 可以看到脊椎 可以看到肩頰骨是三角形的 可以看到肺的血管，像樹根 (樹狀圖) 可以看到心臟   查異常  可以知道氣胸(比原本的肺臟黑)、腫瘤(有點白)、積水(淺灰)&amp;hellip;    但上面打出來這些，都是透過很多的投影片以及教學法所構成的。(所以現在還能記蠻多的)</description>
    </item>
    
    <item>
      <title>5G-PPP Software Network White Paper 畫重點筆記</title>
      <link>https://bestsamina.github.io/posts/2019-02-11-5g-sg-wp-study/</link>
      <pubDate>Mon, 11 Feb 2019 14:33:14 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-02-11-5g-sg-wp-study/</guid>
      <description>From Webscale to Telco, the Cloud Native Journey
 https://5g-ppp.eu/white-papers/
 這邊是一篇&amp;quot;畫重點&amp;quot;的筆記，關於 5G &amp;amp; Cloud Native ，From 5G-PPP(5G Infrastructure Public Private Partnership) 的白皮書。
1 Introduction   Software in 5G-PPP so far
 from “boxes” to “functions”, and from “protocols” to “APIs”    Cloud impact in general
  Cloud impact in telecom ecosystem in particular
 covering Service-Oriented Architecture (SOA), Microservices Architecture (MSA) and Service-Based Architecture (SBA), the latter being adopted in next generation CORE [15] telcograde enhancements that should be added in frameworks like Kubernetes, monitoring, stateless design, etc&amp;hellip; What are the specific requirements between Webscale and telco players?</description>
    </item>
    
    <item>
      <title>第一次玩 operator-sdk 就上手</title>
      <link>https://bestsamina.github.io/posts/2019-02-04-first-operator-sdk-helm/</link>
      <pubDate>Mon, 04 Feb 2019 14:33:14 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-02-04-first-operator-sdk-helm/</guid>
      <description>文章脈絡  前言 Operator Framework 是什麼 認識 operator-sdk CLI 實作開始  建立 K8s 環境 安裝 operator-sdk CLI 用 operator-sdk CLI 建立一個 operator 了解一下新產生的 helm operator 中的檔案 編輯檔案 先在 K8s 中 deploy CRD Build operator container 在 K8s 中部署 operator 在 K8s 中部署自己定義的 custom resource   結語  前言 在接觸 Kubernetes 一陣子後，會發現一堆 operators 。
而很殘念der，自己到目前都還沒有真正好好的玩過。
雖然在 operator-sdk 出現以前，有很多人都自己手刻 operator，不過既然 operator 目前都有個 Framework 了，當然就來玩它囉！
Operator Framework 是什麼  是一個 open source toolkit 管理 Kubernetes native applications, called operators, in an effective, automated, and scalable way 這個 Framework 有兩個主要的專案：  Operator SDK: 就可以用它 build operator。 Operator Lifecycle Manager (OLM): 可以管理 operators 和 CRUD Kubernetes resource 用&amp;hellip;。(可以到這邊玩玩：https://www.</description>
    </item>
    
    <item>
      <title>[TIL] 5G 與 Kubernetes 的一些資料</title>
      <link>https://bestsamina.github.io/posts/2019-01-25-til-5g-k8s-info/</link>
      <pubDate>Fri, 25 Jan 2019 00:57:02 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-01-25-til-5g-k8s-info/</guid>
      <description>因為要開始面對準備論文的參考文件，加上對 5G 不熟，所以從 Video 開始來看。
找到一些蠻不錯的影片，下面分別對這些影片做個間單的描述。
  ⭐ Migrating the Next Generation Mobile Core Towards 5G with Kubernetes - Karla Saur, Intel - Published on 12 Jul 2018 ⭐ Kaloom  Kaloom SDF Features - Published on 27 Nov 2018 Kubernetes Integration with Kaloom SDF - Published on 11 Dec 2018   The Telco Networking Journey to Cloud Native: The Good, Bad, and Ugly - Heather Kirksey - Published on 15 Dec 2018 Keynote: Opening Remarks and Networking Journey to CNFs - Arpit Joshipura &amp;amp; Dan Kohn - Published on 26 Sep 2018  1.</description>
    </item>
    
    <item>
      <title>[咖啡學習] 味覺/嗅覺開發課程 - 拆解咖啡風味與香瓶體驗</title>
      <link>https://bestsamina.github.io/posts/2019-01-20-learn-cafe-coffee-tasting/</link>
      <pubDate>Sun, 20 Jan 2019 23:40:26 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2019-01-20-learn-cafe-coffee-tasting/</guid>
      <description>時間：2019/01/20
地點：新竹 RD cafe
課程資訊：https://www.facebook.com/events/760707187623478/
  內容脈絡  前言 筆記 過程與心得    前言 不知道從何時開始，總之咖啡目前已經變成我日常中的一部份。 回頭想想，才發現，我喝咖啡那麼久，但都不了解咖啡，覺得很不 OK。 所以心中蒙發了想要好好了解咖啡的念頭。
當然，作為一個工程師，自己的本業會努力深入，而咖啡這個坑，我想我只要掌握基本的常識即可。畢竟術業有專攻。除非，碰咖啡碰到深陷其中囉！
今年目標希望好好的來學習咖啡囉！
講師 RD cafe 的烘豆師 - Justin 林永祥 講師，有取得 CQI Q Grader 的證書，也擔任台灣諸多生豆品質評鑑的評審。
筆記  以下為自己參考講義與自我理解的內容，所以可能會有誤的地方，還請指教。
  咖啡練習 味覺訓練 SCAA 新版風味輪 香瓶 36 味 vs 香瓶 T100 發非風味地圖 T100 介紹 嗅覺訓練 如何描述咖啡風味  咖啡練習  最好的練習，就是多人一起喝同一壺咖啡，一起描述咖啡的風味 在高溫的時候喝最好 吃清淡一些  好咖啡 vs 好喝咖啡  客觀 vs 主觀 咖啡豆好壞 vs 好喝、滑順、不酸、不苦 &amp;hellip;  咖啡品嘗  好咖啡包含：餘韻(Aftertaste)、口感(Body)、平衡性(Balance) 通常描述上會包含  香氣(乾/溼香) (Fragrance/Aroma)  研磨後 vs 粉被水浸泡後   風味 Flavor  咖啡特徵   餘韻 Aftertaste  咖啡喝下後，停留在口腔內的好風味   酸質 Acidity 口感 Body  觸感 (滑順 or 刮舌)   平衡性 Balance  風味 + 酸味 + 甜味 + 口感 &amp;hellip; / N   乾淨度 Clean Cup / 甜度 Sweetness / 一致性 Uniformity    味覺訓練  咖啡五味：酸甜苦鹹鮮 Q Grader 杯測師 9 杯魔鬼水：甜鹹酸 x 弱(#1)中(#2)強(#3) Q Grader 杯測師 魔王水：混合 2 種以上的甜鹹酸 &amp;amp; 不同強度   前兩種都有答對，最後一種只能判斷甜鹹酸 ，強度和答案是顛倒或微出入 (因為如下說明)</description>
    </item>
    
    <item>
      <title>2018 in retrospect and prospect</title>
      <link>https://bestsamina.github.io/posts/2018-12-31-2018retrospect/</link>
      <pubDate>Mon, 31 Dec 2018 12:00:02 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-12-31-2018retrospect/</guid>
      <description>2018 年是一個不斷學習和成長的一年。在 2017 年總是不斷的貶低自己，也嘗盡了很多苦頭，也就下定決心重新歸零學習。不過原本是以為外務沒那麼多，專心學習就好，但看來 2018 年並不是如此。這邊就來做個紀錄了。
1. 孵化 TGmeetup 專案 在 2017 年，接觸到了社群，也了解辦社群活動時，總是希望可以不和其他相同領域的社群活動衝突，也因此開始構思了這個蒐集全台灣社群活動的工具。
而在前面設計初期，想了很多，建構了這個專案的雛形，也演變成其實可以蒐集全世界的技術社群資訊。再透過活動報名平台的 API 來蒐集到最新的活動資訊。
當然，從原本的設計是需要自己 Host 一台 server，但懶人如我，想說技術性的社群應該都會用 CLI ，一開始就以不要自己維護機器的方式進行。
一開始我只做了 CLI 版，感謝 Lego 一起加入開發，也做了 Web、RSS、Calendar&amp;hellip;。 當然還有很多可以加強改善的地方，以及需要更多的社群資料的加入。
很感謝給予星星支持這個專案的朋友，我會努力繼續地讓這個專案越來越好 :)
這邊有更詳細的專案出生紀錄呢! [TGmeetup] 從孵化到出生之全記錄
2. 接觸 Kubernetes 感謝 Sam 的介紹，進到 ITRI 實習，接觸了 Kubernetes 。感謝 Mac 哥指點，Kubernetes 要在最短時間內學習有效，就是 Hard way 手動安裝啦！這個基礎的學習經驗，真的幫助了不少在往後的 debug。然後在 ITRI 一起被台灣衫 2 號玩(誤)，真的是驚險刺激。雖然一個 Intern 理論上不會有什麼太多的事情，不過時間上，卻也運用的很剛好 XD。能夠協助解完一個又一個的 Issue ，也是挺有成就感的。:) 經驗值+1。
3. 認識在社群的前輩和朋友 因為是 DigitalOcean Hsinchu 的志工，一方面努力的找講者，也是努力的在找可以和其他社群合作的方法。在自己人脈不夠多的情況下，今年，真的很感謝 Louie Lu, Max Huang, Kevin Cyu 擔任講者。</description>
    </item>
    
    <item>
      <title>[TIL] 製作 Ubuntu 開機隨身碟相關參考連結</title>
      <link>https://bestsamina.github.io/posts/2018-10-26-worklog/</link>
      <pubDate>Fri, 26 Oct 2018 20:44:02 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-10-26-worklog/</guid>
      <description>因為每次重做開機隨身碟總是要查一下要怎麼做。所以這邊就做一下記錄。方便之後查找
 參考連結：  https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-macos https://www.youtube.com/watch?v=fkBfom4FQIQ&amp;amp;feature=youtu.be   Ubuntu 16.04.5 LTS:  http://releases.ubuntu.com/16.04/    </description>
    </item>
    
    <item>
      <title>IPVS-based Kube-proxy for Scaled Kubernetes Load Balancing</title>
      <link>https://bestsamina.github.io/posts/2018-10-19-ipvs-based-kube-proxy-4-scaled-k8s-lb/</link>
      <pubDate>Mon, 15 Oct 2018 12:05:37 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-10-19-ipvs-based-kube-proxy-4-scaled-k8s-lb/</guid>
      <description>這篇為 10月19日 talk 的文字版， slides 是 https://speakerdeck.com/sufuf3/ipvs-based-kube-proxy-for-scaled-kubernetes-load-balancing 。
 內容脈絡
 Preface (前言) Introduction (介紹) Kube-Proxy  What is Kube-proxy (什麼是 Kube-proxy) Kube-Proxy mode   IPVS  LVS What is IPVS (什麼是 IPVS) IPVS with Netfilter (IPVS 和 Netfilter) IPVS vs iptables (IPVS 與 iptables 的比較)   IPVS-based Kube-proxy  Why using IPVS? (為什麼要用 IPVS) How IPVS-based Kube-proxy work? (IPVS-based Kube-proxy 是怎麼運作的) Run Kube-proxy in IPVS mode (來執行 IPVS mode 的 Kube-proxy) IPVS Service Network Topology Example   Implement IPVS-based K8s service load balancing (實現 IPVS-based K8s service load balancing) Conclusion (結論)  Preface (前言) 在一般使用 Kubernetes 的 kube-proxy 情況下，通常都使用 iptables 模式。</description>
    </item>
    
    <item>
      <title>實現 IPVS-based K8s service load balancing - 不同 namespace 擁有自己的 external IP</title>
      <link>https://bestsamina.github.io/posts/2018-10-15-hands-on-k8s-kube-proxy-w-ipvs-lb/</link>
      <pubDate>Mon, 15 Oct 2018 11:25:11 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-10-15-hands-on-k8s-kube-proxy-w-ipvs-lb/</guid>
      <description>文章脈絡
 前置作業 環境說明 K8s 於不同 namespace 擁有自己的 external IP 之環境  部署 測試    前置作業 1. 把 IPVS 的 kernel module load 進來 modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 cut -f1 -d &amp;#34; &amp;#34; /proc/modules | grep -e ip_vs -e nf_conntrack_ipv4 2. 在啟動 kube-proxy 時，參數設為 --proxy-mode=ipvs (如果要使用其他演算法，那可以設定 --ipvs-scheduler=rr rr 改為其他的)
3. 如果是在 v.10 之前的版本， kube-proxy 要加下面的參數 --feature-gates=SupportIPVSProxyMode=true 4. 建立 k8s 環境 安裝 tool: https://github.</description>
    </item>
    
    <item>
      <title>申請 GitHub OAuth 權限紀錄</title>
      <link>https://bestsamina.github.io/posts/2018-10-11-github-oauth/</link>
      <pubDate>Thu, 11 Oct 2018 01:10:15 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-10-11-github-oauth/</guid>
      <description>前言 會來使用 GitHub 的 OAuth 是因為發現 TGmeetupBot 在開 issue 的時候，總是會開到重複的 Event Issue。
在經過一番的拆解後，發現雖然都是使用 Basic authentication ，用 Postman 是可以看到所有的 Issue ，但是用程式卻是只能看到最新的 30 筆 issue。
所以就需要 query 更多的 GitHub API 來比對沒撈到的 issue 用搜尋的方式確保不會開到重複的 Issue。
但卻碰上 Rate limiting 的問題了。
因為每小時只能有 60 個請求，但現在卻超過了。
所以就要來用 OAuth 了。
以下是參考 Authorizing OAuth Apps 申請 OAuth 的紀錄。(讓自己下次在申請 OAuth 時，可以翻閱這個筆記，快速記得。)
1. 申請 OAuth2 認證 到 https://github.com/settings/applications/new 註冊成為 OAuth 使用者。
 必填欄位 &amp;ldquo;Application name&amp;rdquo; &amp;ldquo;Homepage URL&amp;rdquo; 與 &amp;ldquo;Authorization callback URL&amp;rdquo;  Application name：為 Application 名字的字串 (這邊可以隨意的字串，方便管理即可。) Authorization callback URL：請填入 http://localhost:8000/ (這欄位是為了拿一次性的 access token，後面會提供如何設定的範例，這會需要在本機上進行。) Homepage URL: 隨意的 URL    範例圖</description>
    </item>
    
    <item>
      <title>關於加速 NFV Data Plane 的 SR-IOV 與 DPDK</title>
      <link>https://bestsamina.github.io/posts/2018-08-20-dpdk-sriov-learn/</link>
      <pubDate>Mon, 20 Aug 2018 00:20:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-08-20-dpdk-sriov-learn/</guid>
      <description>本篇是個初步理解 SR-IOV 與 DPDK 兩個技術的筆記。
內容綜合官網的說明、參考 https://www.metaswitch.com/blog/accelerating-the-nfv-data-plane 的描述、自我的理解。 如有任何描述錯誤，敬請指教。
 本篇是個個人筆記。文章脈絡大致如下：
 一句話形容 SR-IOV 與 DPDK SR-IOV 的源起 SR-IOV 的技術理解 DPDK 的緣起 DPDK 的技術理解  一句話形容 SR-IOV 與 DPDK 一句話秒懂的形容：
 SR-IOV: SR-IOV 是一種技術，使用這項技術，就讓虛擬主機或是虛擬化的容器如同直接接上實體網卡一樣，封包一進到實體主機的網卡後，就等於直接進到虛擬主機或是虛擬化的容器中。 DPDK: DPDK 這項技術，可以讓進到實體主機的網路封包，直接跳過 Linux Kernel 層，送到 User space 的 Applications 做處理。  以上兩種技術，皆是 Intel 最先提出的。
SR-IOV 的源起 這一切要回到當初，虛擬主機的技術講起。
假設在一個實體主機上有幾台 VM，此時當實體主機上的網卡 (NIC) 收到一個封包的時候，會向 CPU 發送一個中斷請求 (interrupt request = IRQ)，然後 CPU 就必須中斷目前在做的事情，轉而處理這封包，把封包送到對的 VM 中。而封包那麼多，中斷就會一直發生，這樣也會降低 CPU 的效能。而且不只有實體主機上這個 CPU 的 IRQ 問題，VMM (Virtual Machine Manager) 的 CPU 也會被中斷，只要它辨識出 package 要送往的 VM ，它就會向 VM 自己的 CPU 請求中斷，叫 VM 的 CPU 來處理這封包。</description>
    </item>
    
    <item>
      <title>[CORD] CORD 平台學習筆記</title>
      <link>https://bestsamina.github.io/posts/2018-07-26-cord-platform/</link>
      <pubDate>Thu, 26 Jul 2018 15:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-07-26-cord-platform/</guid>
      <description>From: https://wiki.opencord.org/display/CORD/Documentation
 分為三個 components:
 Trellis:  CORD fabric 的網路架構 service composition 中的 overlay 虛擬化角色。   CORD Monitoring Service  是 CORD service ，專門蒐集與分析即時的 metrics。   XOS  專門 configure 和控制 CORD services.    Trellis  From: https://wiki.opencord.org/display/CORD/Trellis%3A+CORD+Network+Infrastructure
  underlay leaf-spine fabric + overlay virtual networking + unified SDN control (underlay + overlay)   The efficient of unified SDN control (underlay + overlay)  為了 tenant 網絡的分佈式虛擬 routing 多播流量傳輸的優化 目前有兩個 ONOS cluster  onos-cord  負責 overlay((virtual networking and service composition)) 和 access 的 infrastructure。 分別 hosts VTN 和 vOLT 的 APP。 Multicast control: IGMP snooping   onos-fabric  負責控制 fabric 與upstream routers 的介接。 Multicast control: PIM-SSM        Trellis Underlay Fabric  Ref: https://wiki.</description>
    </item>
    
    <item>
      <title>在 vagrant(Ubuntu 16.04) 中安裝 DPDK 與 OVS 紀錄筆記</title>
      <link>https://bestsamina.github.io/posts/2018-06-27-dpdk-ovs-vagrant/</link>
      <pubDate>Wed, 27 Jun 2018 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-06-27-dpdk-ovs-vagrant/</guid>
      <description>本篇使用的 Vagrantfile 可參閱 https://github.com/sufuf3/network-study-notes/blob/master/DPDK_OVS/Vagrantfile
 前言 這是一個 Open vSwitch with DPDK 的安裝紀錄，OVS 可以在 userspace 完全使用 DPDK library 。
環境需求  如果是使用 Linux ，在 Linux 中 kernel 版本要大於 v3.0.0 版。 DPDK v17.11.2 如果會使用到物理的 NIC 網卡，那就要使用有支援 DPDK 的網卡。可以參考 http://core.dpdk.org/supported/。(網卡查詢：lspci | grep -i net)  參考來源：http://docs.openvswitch.org/en/latest/intro/install/dpdk/
前置作業 參考 http://doc.dpdk.org/guides/linux_gsg/sys_reqs.html 在系統需求上，有三個在編譯 DPDK 的前置作業。
1. 在 x86 上 BIOS 設定的先決條件 不過大多數的平台，不需要特殊的 BIOS 設定，所以這邊跳過。
2. 需要的工具以及 Libraries  GNU make coreutils: cmp, sed, grep, arch, etc.</description>
    </item>
    
    <item>
      <title>[CORD] 初步認識 CORD 是什麼之筆記</title>
      <link>https://bestsamina.github.io/posts/2018-02-08-cord-init/</link>
      <pubDate>Thu, 08 Feb 2018 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-02-08-cord-init/</guid>
      <description>本篇為參考 CORD 之「Central Office Re-architected as a Datacenter, IEEE Communications, October 2016」與 https://wiki.opencord.org/pages/viewpage.action?pageId=1278047 所做的整理筆記。
 簡介 CORD 全名為 『Central Office Re-architected as a Datacenter』，是由 ONLAB(ONF) 所提出的一個新的電信網路機房的概念設計。這設計將會帶來經濟效益與敏捷性。透過開放架構、商業化硬體、open source 軟體，拆解原本傳統且封閉的的電信服務商的網路架構，讓新的技術在這框架中實現新的電信資料中心，並且價低採購與維護成本。
動機 為了達到 bandwidth 的需求增加以及不斷增加的服務期望，需要引進新的 Data Center 架構。然而每一家的 Telco Central Office (CO) 架構都不一樣，而這反倒也造成 CAPEX 和 OPEX 的負擔。
因此提出 CORD 架構為新一代的 Telco Central Office ，結合三大技術：SDN(Software-Defined Networking), NFV(Network Functions Virtualization), elastic cloud services。
並且都運行在白牌的硬體上。打造好的成本效益與敏捷性的網路。
註：CAPEX: Capital Expenditure(資本性支出), OPEX: Operating Expenditure(運營性支出)。
介紹 CORD 包含三大趨勢技術：
 SDN: 分 data plane 和 control plane ，並簡化原本的網絡基礎設施，可以使用白牌的 Switch。 NFV: 將 data plane 的硬體設備搬到 VM ，就可以更有彈性的來做管理。 Cloud: 可以定義更 scalable 的服務，包含 micro-services, virtualized commodity platforms, elastic scaling, and service composition 等的軟體解決方案，加快創新的速度。  在應用服務部分：</description>
    </item>
    
    <item>
      <title>[TGmeetup] 之詳細安裝操作步驟</title>
      <link>https://bestsamina.github.io/posts/2018-01-28-install-w-meetup-api/</link>
      <pubDate>Sun, 28 Jan 2018 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-01-28-install-w-meetup-api/</guid>
      <description>此篇文章內容同步於 https://hackmd.io/s/ByrxYmi4G 。
安裝流程  Step 1. 申請 meetup_api 的 auth Key  申請 OAuth2 認證 取得 Key 和 secret 在本機端啟動 SimpleHTTPServer 取得 access token 同意該 OAuth 使用者可以使用你的帳號。 轉導向到自己本機的 8000 port 並取得一次性的 access token 準備取得 refresh token 取得 refresh token 與 access token   Step 2. 下載專案並編輯 API.cfg 檔 Step 3. 進行安裝  安裝說明 請依據以下安裝說明進行，謝謝。
Step 1. 申請 meetup_api 的 auth Key 以下操作步驟皆是參考官方的說明文件來進行，並提供簡單的取得方法。
1. 申請 OAuth2 認證  到 https://secure.</description>
    </item>
    
    <item>
      <title>[TGmeetup] 從孵化到出生之全記錄</title>
      <link>https://bestsamina.github.io/posts/2018-01-28-tgmeetups-birthday/</link>
      <pubDate>Sun, 28 Jan 2018 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-01-28-tgmeetups-birthday/</guid>
      <description>Repository: https://github.com/TGmeetup/TGmeetup
前言 趁著今天公開專案日(2018/01/28)，就來紀錄一下從啟動到執行這專案的整個過程吧！算是一篇 TGmeetup 專案的雜感吧！
 可能會講比較多的廢話。還請包涵。
 目錄  發想 規劃與設計 動工前的失憶症 開工寫程式 寫文檔 其他修修補補 推廣 在這過程中自我的檢視 結論 感謝  發想 最一開始，是在 DigitalOcean Hsinchu 的某次檢討會最後討論下次的聚會日期時，當時大家想要避開大型 conference 和其他知名社群活動，所以開始蒐集各社團資訊(畢竟草創初期，有點辛苦)。不過，我那時非常納悶，因為我參與社群也是近一年的事，但台灣的技術社群其實有些成立了很久。但不曉得為何沒有整合社群活動資訊的平台或工具，所以開啟了我想要整合的想法。(不過有很棒的整合社群資訊平台： https://www.mindmeister.com/zh-hk/303031964?t=WS4msLPJIs )
當然，如果整合的好，我相信這會是一個很不錯的工具。畢竟在技術圈，在有空的時間多參與技術社群的活動，都可以幫助自己的成長。所以在心中下定決心，我一定要把它做出來。
規劃與設計 有了想法，就要來實踐。 (下面是我比較跳耀性的思路，如果看不懂，還請忽略了。)
 構思第一版：想像著有一個 Web 版，呈現這些資訊。然後想到麻煩的資料庫。不過這樣就要處理權限問題，登入問題。這樣要 open source 出來，可能會遇到障礙。 還有什麼方法呢？ 構思第二版：啊！就仿照 CDNJS 把社群資訊用 package.json 來儲存吧。然後透過活動 API 抓到的活動資訊就儲存到另外的 events.json 檔。然後 Web 也是讀這些 Json 檔，剛剛好。 構思第三版：package.json 的格式初步訂定。 events.json 格式初步訂定。這樣我是不是要用 API server 呀？這樣在 terminal 使用的時候使用找就不用自己設定自己的 config 檔了。可是這樣架構上好像會有點複雜。維護的成本也會比較高？來賭一下好了，反正會用 terminal 的人基本上對於設定這件事情並不會排斥，反正拿一次驗證，終身免役。不管了，專案最怕的是沒有人維護，最起碼要讓這專案沒人維護時，也可以自己活得好好的。就讓大家自己在安裝前到 Meetup 上拿 OAuth 的 API 吧！(只要文檔寫得好就好。) 構思第四版：構思整個程式的架構。再加上 package.</description>
    </item>
    
    <item>
      <title>[Build container] Container with Linux Namespace</title>
      <link>https://bestsamina.github.io/posts/2018-01-14-container-linux-namespace/</link>
      <pubDate>Sun, 14 Jan 2018 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-01-14-container-linux-namespace/</guid>
      <description>目錄：
 前言 Linux Namespace 類別 The system calls of namespaces API UTS namespaces (CLONE_NEWUTS) IPC namespaces (CLONE_NEWIPC) PID namespaces (CLONE_NEWPID) Mount namespaces (CLONE_NEWNS) User namespaces (CLONE_NEWUSER) Network namespaces (CLONE_NEWNET)  前言 Linux Namespace 是 Linux Kernel 的其中一個功能，可以隔離對應的系統資源。 關於深入了解 Linux Namespace ，會再另闢一篇來探討。 而這邊就先照著進行，不過為了想法上能夠知道在做什麼，我是套用 C++ 的 Namespace 概念來幫助我先進行實作，讓我透過實際的程式與操作後，而對應到原來這就是 Linux Namespace 以及要怎麼實現。 PS. 建議有一點 OS 概念跟著做會比較好，要不然，最起碼知道 PID 是什麼。
實作環境摘要  Ubuntu 16.04 Kernel version: 4.13.0-1002-gcp Go version: v1.9.2 linux/amd64  Linux Namespace 類別 依據 Linux Programmer&amp;rsquo;s Manual 的 Namespace 文件中提到 &amp;ldquo;One use of namespaces is to implement containers.</description>
    </item>
    
    <item>
      <title>[Build container] Docker 簡介與 Go 環境安裝</title>
      <link>https://bestsamina.github.io/posts/2018-01-03-my-container-setup-env/</link>
      <pubDate>Wed, 03 Jan 2018 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2018-01-03-my-container-setup-env/</guid>
      <description>Docker 簡介 就軟體的 Docker 來說，Docker 是一個開放原始碼軟體專案。可以讓應用程式佈署在軟體容器下並執行。在 Linix 中， Docker 利用 Linux Kernel 中的資源分離機制，如cgroups, Namespace ，來建立獨立的軟體容器（containers）。 它最早釋出於2013/03/13，原作者為 Solomon Hykes 。 他於 2013 PyCon 的 5 分鐘 lightning talk 中提出 The Future of Linux Containers。 並在 lightning talk 中簡單展示 Docker 的使用方法。
 小小疑惑: 為什麼 go 語言的專案會跑到 PyCon 中發表呢？我覺得比較有關的會是 open source 或是 Linux 相關的 Conference 呢！？
 Docker 擁有的特點有：  輕量化：共享同一台系統的 Kernel 資源，所以可以迅速啟動而且用的 memory 較少。而且 image 是 Filesystem 建制的，所以可以共享相同文件。 open source 標準：可以運行於 Linux distributions 和 Windows OS.</description>
    </item>
    
    <item>
      <title>了解 npm 的二三事</title>
      <link>https://bestsamina.github.io/posts/2017-11-27-npm/</link>
      <pubDate>Mon, 27 Nov 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-11-27-npm/</guid>
      <description>了解 npm 的二三事 什麼是 NPM 如果你有寫過 python ，你應該會很熟悉 pip ，pip 是一個 python 的套件管理系統。(pip is package management system used to install and manage software packages written in Python. &amp;ndash;from Wikipedia) 那什麼是 npm 呢？ 就是 Node.js 的 套件管理系統啦！ (A default package manager for the JavaScript runtime environment Node.js &amp;ndash; from Wikipedia) NPM 全名 Node Package Manager。
  什麼是&amp;quot;套件管理系統&amp;quot;？
 A package manager is a set of tools that automates and manages computer software.</description>
    </item>
    
    <item>
      <title>Scrum framework</title>
      <link>https://bestsamina.github.io/posts/2017-07-02-scrum-framework/</link>
      <pubDate>Sun, 02 Jul 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-07-02-scrum-framework/</guid>
      <description>一個 Sprint 為期 1~4 周。
1. 角色 可一人分飾多角，每個腳色都該做好自己的職責。
* Product Owner (PO):  決定整個產品，設定產品待辦項目的優先順序。  * Scrum Master: 教練的角色，可及時地為團隊成員提供幫助。
* Team:  Team = PO + Scrum Master + Development Team 人數：7 +- 2 Development Team = 負責開發產品  2. Items * Product Backlog (產品待辦清單): 裡面是每個 Item ， 放的東西有 User Story, Bug, Tech Debt (技術債)，優先權高的、明確的工作項目排上面，越先做。 不明確的，排後面，之後開遠光燈會議在調整。
* Sprint Backlog (衝刺待辦清單): 從 Product Backlog 中優先權最高的幾個拉到這個清單裡，轉換成 task 就開始做。
* Potentially Shippable Product (潛在可交付產品增量) 開發團隊的產出，如果 PO 說先不要上線，就是之後 PO 可以和客戶談判的籌碼。</description>
    </item>
    
    <item>
      <title>Scrum 敏捷軟體開發 一日體驗營@新竹 - Part 2</title>
      <link>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part2/</link>
      <pubDate>Sun, 02 Jul 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part2/</guid>
      <description>講師: David Ko
Outline  敏捷觀念簡介 Scrum 基礎觀念介紹 如何組織需求 Scrum 會議 Scrum 開發方法總結  Part 2 - Scrum 基礎觀念介紹 1. 甚麼是 Scrum 🏉 A. Scrum 是一個開發複雜系統的框架(Scrum framework) B. Scrum 是&amp;hellip;  沒有 engineering practices  像是 TDD, Unit testing, 搭檔編程   輕量級的用法  C. Scrum 方法的特性  頻繁交付高價值
 小而美  小團隊 小迭代 小需求   團隊特性  自主決定 責任感 透明度     Scrum 專案開始進行時，要趕快處理的兩個問題：
1. 經常檢查你的方向是否正確，你做的東西是否是客戶要的。</description>
    </item>
    
    <item>
      <title>Scrum 敏捷軟體開發 一日體驗營@新竹 - Part 3</title>
      <link>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part3/</link>
      <pubDate>Sun, 02 Jul 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part3/</guid>
      <description>講師: David Ko
Outline  敏捷觀念簡介 Scrum 基礎觀念介紹 如何組織需求 Scrum 會議 Scrum 開發方法總結  Part 3 - 如何組織需求(Scrum 需求清單) 1. 產品需求清單 (Product Backlog) 1-1. 甚麼是產品需求清單?  所要要做的事情的清單 做甚麼事的清單 根據商業價值來排序  1-2. 產品需求清單項目的種類 2. 使用者故事 (User Story) 2-1. 甚麼是使用者故事  軟體的需求 用商業語言來描述 每個故事不會太大  寫在便利貼上 通常是由使用者寫    2-2. 使用者故事樣板 As a [role], I want to [fuction] because of [business value].
eg. As a bookstore customer, I can search for a book by the title, so that I can easily find all books with that title.</description>
    </item>
    
    <item>
      <title>Scrum 敏捷軟體開發 一日體驗營@新竹 - Part 4</title>
      <link>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part4/</link>
      <pubDate>Sun, 02 Jul 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part4/</guid>
      <description>講師: David Ko
Outline  敏捷觀念簡介 Scrum 基礎觀念介紹 如何組織需求 Scrum 會議 Scrum 開發方法總結  Part 4. Scrum 會議 1. 敏捷評估  小小迷之聲1:
就是評估這個專案可以多久完成啦！以人/天為單位。 是說，比起經驗法則，這個有個依據，雖然很多還是自己定義的 XDD。但忘了問問題的部分是，那個人/天的人的能力標準是以哪個為單位基準? junior 感覺不是，但非常 senior 的工程師感覺會做很快，中間感覺合適。但又感覺應該要依據即將參與這專案的工程師能力素質的比例，來做衡量。比方 junior 與 senior 比例約 3:2 ，如果原先是以介在 senior 和 junior 中間的能力來做估算就還要程以相對的比例，會比較好吧? 不過只是估算啦！ 拍腦袋 與 敏捷評估 之間是個誤差值多和少的概念。
小小迷之聲2:
評估這件事真的不能一個人決定呀！經過這活動下來，整個就覺得傳統方式，如果是非工程師估算時間，會因為對方不了解我，然後就壓時程，根本就是惡性循環。然後做得半死的是勞累的員工。整個超不 OK 的！而經過討論評估的時間真的比較 OK，但如果討論時，遇到那種 甚麼，你這竟然覺得要花5天！ 的那種人，感覺討論氣氛就不會太好~ 下面回到正題~
 1-0. 評估原則  小筆大容易 相對比絕對容易 找基準(中間值)，排相對大小，算時間  1-1. 發布會議解析   Why: 想對發佈的時程和內容有個概略的估算
  Who: PO, Scrum Master, Team</description>
    </item>
    
    <item>
      <title>Scrum 敏捷軟體開發 一日體驗營@新竹 - Part 5</title>
      <link>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part5/</link>
      <pubDate>Sun, 02 Jul 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-07-02-scrum-hsinchu-part5/</guid>
      <description>講師: David Ko
Outline  敏捷觀念簡介 Scrum 基礎觀念介紹 如何組織需求 Scrum 會議 Scrum 開發方法總結  Part 5. Scrum 開發方法總結  敏捷是一種文化，並不是流程 Scrum 是管理的框架 思維：  是照妖鏡 - 可及早看到問題點 像下棋 - 有規則、需教練指導     小小迷之聲: 也像各種運動比賽
    適合的情況 不適合的狀況     小團隊，沒有正式的軟體開發方法 PO 主導性強 承認遇到危機，希望可以改善 太小或太短的專案 維護的團隊 不想變革的組織    </description>
    </item>
    
    <item>
      <title>Scrum 敏捷軟體開發 一日體驗營@新竹 - Part 1</title>
      <link>https://bestsamina.github.io/posts/2017-07-01-scrum-hsinchu-part1/</link>
      <pubDate>Sat, 01 Jul 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-07-01-scrum-hsinchu-part1/</guid>
      <description>講師: David Ko
Outline  敏捷觀念簡介 Scrum 基礎觀念介紹 如何組織需求 Scrum 會議 Scrum 開發方法總結  Part 1 - 敏捷觀念簡介 0. Why post it 為什麼用便利貼
- 所有東西都可以看的到
- 資訊視覺化
- 彈性
- 說出更多東西
- grouping 大家來
- 共識
- voting
1. 敏捷歷史 年份
方法
1950
PDCA(Plan-Do-Check-Act): 針對品質工作按規劃、執行、查核與行動來進行活動，
以確保可靠度目標之達成，並進而促使品質持續改善
1970
瀑布式開發
1986
Spiral model(螺旋模型)
1995
Scrum 用管理角度看
1997
FDD(Feature Driven Development)
1999
Extreme Programming
2001
敏捷宣言
2003
Lean Software Development
2. 敏捷宣言  個人與互動 重於 流程與工具 可用的軟體 重於 詳盡的文件 與客戶合作 重於 合約協商 回應變化 重於 遵循計畫   兩邊都很重要，但左邊非常重要，敏捷是重計畫的方法</description>
    </item>
    
    <item>
      <title>[機器學習] Supervised and Unsupervised Learning (監督學習與非監督學習) -Week 1-1</title>
      <link>https://bestsamina.github.io/posts/2017-06-22-ml-supervised-and-unsupervised-learning/</link>
      <pubDate>Thu, 22 Jun 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-06-22-ml-supervised-and-unsupervised-learning/</guid>
      <description>第一週 - From Stanford&amp;rsquo;s coursera
 Machine Learning  Supervised Learning  Regression Classification   Unsupervised Learning  Clustering Cocktail Party Algorithm      Machine Learning (機器學習)   定義：
 Arthur Samuel: the field of study that gives computers the ability to learn without being explicitly programmed. Tom Mitchell: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</description>
    </item>
    
    <item>
      <title>apt指令之套件管理整理</title>
      <link>https://bestsamina.github.io/posts/2017-03-15-apt/</link>
      <pubDate>Wed, 15 Mar 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-03-15-apt/</guid>
      <description>Ubuntu(Debian) 系列 apt-get  apt-get update
更新套件資訊(基本上沒事就跑一下，習慣登入就下一下指令) apt-get check
檢查系統上的套件相依性情形 apt-get upgrade
更新所有有新版本的套件(基本上就是 Ｗindows 常出現要更新的那個東西，系統更新是基本，所以沒事就 apt-get upgrade 一下吧！)
PS1. 將現有的套件升級, 若遇到相依的問題(需要安裝其它新的相依套件或影響到其它套件的相依性)，該套件不會進行升級而保留原套件。
PS2. 系統內心話：蛤～升級這套件還要安裝或移除相依套件唷！好麻煩唷！我還是留著這原套件好了！ㄎㄎ  -u 顯示完整的可更新套裝軟體列表   apt-get -s upgrade
可以看那些套件會被更新 apt-get dist-upgrade
強制更新所有有新版本的套件
PS1. 如果遇到相依性問題, 需要安裝或移除相關套件, 就會試著去安裝或移除相依套件，而進行該套件升級。
PS2. 系統內心話：哈哈～就讓我來大刀闊斧幫你升級所有套件吧！如果其他服務因為套件升級而掛掉，你家的事！ㄎㄎ apt-get install 套件名稱
安裝套件(相依套件也會幫忙裝)
eg. apt-get install vim  -y 若有問問題都回答Yes apt-get &amp;ndash;reinstall install 套件名稱
裝壞掉重裝法   apt-get remove 套件名稱
移除套件 apt-get &amp;ndash;purge remove 套件名稱
連設定檔一起全部移除 apt-get clean</description>
    </item>
    
    <item>
      <title>Stacer - 系統優化器</title>
      <link>https://bestsamina.github.io/posts/2017-02-17-stacer/</link>
      <pubDate>Fri, 17 Feb 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-02-17-stacer/</guid>
      <description>Stacer - 系統優化器 這套工具類似 Windows 上面安裝 CCleaner 加上系統資源監控！
 來源 https://github.com/oguzhaninan/Stacer
安裝環境 Ubuntu base 桌面版本
介紹 在GitHub上面的介紹就是&amp;quot;Ubuntu System Optimizer&amp;quot;！
安裝  到GitHub頁面上點選releases
 依據作業系統的位元數，選擇要下載的deb包
 安裝
  畫面 整個就是超級漂亮的！而且是用JavaScript寫的，超猛！
雖然Linux Mint就有系統資源監控了
不過既然安裝這麼漂亮的東西，當然是要來支持一下了！
Stacer另外還包含的功能：  System Cleaner：可以清除Apt cache, Crash Reports, System Logs, App Cache，不過如果有些服務紀錄是需要留的，還是要注意一下，別全選了~ Startup Apps：這個我的電腦裡沒有出現~ Services：不用在sudo service XXX stop，直接滑鼠點一下就好哩！ Uninstaller：可移除安裝的套件 介紹完畢~  之後要很潮的打開它:)
reference: https://itsfoss.com/optimize-ubuntu-stacer/</description>
    </item>
    
    <item>
      <title>終端機的超狂工具-TMUX 與指令整理</title>
      <link>https://bestsamina.github.io/posts/2017-02-01-tmux/</link>
      <pubDate>Wed, 01 Feb 2017 14:51:05 +0800</pubDate>
      
      <guid>https://bestsamina.github.io/posts/2017-02-01-tmux/</guid>
      <description>Tmux是個終端機工具(Terminal multiplexer)，可以管理多個session，window和panel。
如何安裝 Debian / Ubuntu：apt-get install tmux
關於session的指令  tmux：開啟一個新的client(包含一個session，window，panel) tmux ls：列出有那些sessions tmux a：重回上次最新的client tmux a -t [number]：重回該number的session  關於window的指令 預設的操作要加上 Ctrl-b 功能鍵
 Ctrl-b + c：建立新的window (create) Ctrl-b + number：改變window Ctrl-b + d：關閉目前的 client (detach) Ctrl-b + l：與先前選擇的window間切換 Ctrl-b + n：移到下個window (next) Ctrl-b + p：移到上個window (previous) Ctrl-b + &amp;amp;：刪除目前的window Ctrl-b + ,：重新命名目前的window，修改後按&amp;quot;enter“ Ctrl-b + ?：列出所有快捷鍵說明 Ctrl-b + w：列出目前 clinet 的window，用數字鍵切換 (window)  關於當前panel的指令  Ctrl-b + %：垂直分割window (分左圈圈和右圈圈) Ctrl-b + &amp;ldquo;：水平分割window Ctrl-b + ↑↓←→：使用上下左右鍵改變panel所在的當前panel Ctrl-b + o：移往下一個區塊； Ctrl-b + q：顯示區塊的數字代號 Ctrl-b + q + number：當數字顯示時使用數字鍵移往該panel Ctrl-b + [：讀歷史訊息，按 q 離開 Ctrl-b + {：將目前的區塊移往左邊 Ctrl-b + }：將目前的區塊移往右邊  </description>
    </item>
    
  </channel>
</rss>
